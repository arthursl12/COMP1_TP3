

Terminals which are not used:

   print
   exit_command


State 5 contains 7 reduce/reduce conflicts.

Grammar
rule 1    expr_list -> expr
rule 2    expr_list -> expr_list ',' expr
rule 3    expr -> simple_expr
rule 4    expr -> simple_expr RELOP simple_expr
rule 5    simple_expr -> term
rule 6    simple_expr -> simple_expr ADDOP term
rule 7    simple_expr -> simple_expr '-' term
rule 8    term -> factor_a
rule 9    term -> term MULOP factor_a
rule 10   function_ref -> IDENTIFIER
rule 11   function_ref -> function_ref_par
rule 12   function_ref_par -> variable '(' expr_list ')'
rule 13   variable -> simple_variable_or_proc
rule 14   variable -> function_ref_par
rule 15   simple_variable_or_proc -> IDENTIFIER
rule 16   factor_a -> '-' factor
rule 17   factor_a -> factor
rule 18   factor -> IDENTIFIER
rule 19   factor -> constant
rule 20   factor -> '(' expr ')'
rule 21   factor -> function_ref
rule 22   factor -> NOT factor
rule 23   constant -> INT_CONSTANT
rule 24   constant -> REAL_CONSTANT
rule 25   constant -> CHAR_CONSTANT
rule 26   constant -> BOOL_CONSTANT

Terminals, with rules where they appear

$ (-1)
'(' (40) 12 20
')' (41) 12 20
',' (44) 2
'-' (45) 7 16
error (256)
print (258)
exit_command (259)
ADDOP (260) 6
RELOP (261) 4
MULOP (262) 9
NOT (263) 22
INT_CONSTANT (264) 23
REAL_CONSTANT (265) 24
BOOL_CONSTANT (266) 26
IDENTIFIER (267) 10 15 18
CHAR_CONSTANT (268) 25
UMINUS (269)

Nonterminals, with rules where they appear

expr_list (19)
    on left: 1 2, on right: 2 12
expr (20)
    on left: 3 4, on right: 1 2 20
simple_expr (21)
    on left: 5 6 7, on right: 3 4 6 7
term (22)
    on left: 8 9, on right: 5 6 7 9
function_ref (23)
    on left: 10 11, on right: 21
function_ref_par (24)
    on left: 12, on right: 11 14
variable (25)
    on left: 13 14, on right: 12
simple_variable_or_proc (26)
    on left: 15, on right: 13
factor_a (27)
    on left: 16 17, on right: 8 9
factor (28)
    on left: 18 19 20 21 22, on right: 16 17 22
constant (29)
    on left: 23 24 25 26, on right: 19


state 0

    NOT 	shift, and go to state 1
    INT_CONSTANT	shift, and go to state 2
    REAL_CONSTANT	shift, and go to state 3
    BOOL_CONSTANT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5
    CHAR_CONSTANT	shift, and go to state 6
    '-' 	shift, and go to state 7
    '(' 	shift, and go to state 8

    expr_list	go to state 9
    expr	go to state 10
    simple_expr	go to state 11
    term	go to state 12
    function_ref	go to state 13
    function_ref_par	go to state 14
    variable	go to state 15
    simple_variable_or_proc	go to state 16
    factor_a	go to state 17
    factor	go to state 18
    constant	go to state 19



state 1

    factor  ->  NOT . factor   (rule 22)

    NOT 	shift, and go to state 1
    INT_CONSTANT	shift, and go to state 2
    REAL_CONSTANT	shift, and go to state 3
    BOOL_CONSTANT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5
    CHAR_CONSTANT	shift, and go to state 6
    '(' 	shift, and go to state 8

    function_ref	go to state 13
    function_ref_par	go to state 14
    variable	go to state 15
    simple_variable_or_proc	go to state 16
    factor	go to state 20
    constant	go to state 19



state 2

    constant  ->  INT_CONSTANT .   (rule 23)

    $default	reduce using rule 23 (constant)



state 3

    constant  ->  REAL_CONSTANT .   (rule 24)

    $default	reduce using rule 24 (constant)



state 4

    constant  ->  BOOL_CONSTANT .   (rule 26)

    $default	reduce using rule 26 (constant)



state 5

    function_ref  ->  IDENTIFIER .   (rule 10)
    simple_variable_or_proc  ->  IDENTIFIER .   (rule 15)
    factor  ->  IDENTIFIER .   (rule 18)

    $   	reduce using rule 10 (function_ref)
    $   	[reduce using rule 18 (factor)]
    ADDOP	reduce using rule 10 (function_ref)
    ADDOP	[reduce using rule 18 (factor)]
    RELOP	reduce using rule 10 (function_ref)
    RELOP	[reduce using rule 18 (factor)]
    MULOP	reduce using rule 10 (function_ref)
    MULOP	[reduce using rule 18 (factor)]
    ',' 	reduce using rule 10 (function_ref)
    ',' 	[reduce using rule 18 (factor)]
    '-' 	reduce using rule 10 (function_ref)
    '-' 	[reduce using rule 18 (factor)]
    '(' 	reduce using rule 15 (simple_variable_or_proc)
    ')' 	reduce using rule 10 (function_ref)
    ')' 	[reduce using rule 18 (factor)]
    $default	reduce using rule 10 (function_ref)



state 6

    constant  ->  CHAR_CONSTANT .   (rule 25)

    $default	reduce using rule 25 (constant)



state 7

    factor_a  ->  '-' . factor   (rule 16)

    NOT 	shift, and go to state 1
    INT_CONSTANT	shift, and go to state 2
    REAL_CONSTANT	shift, and go to state 3
    BOOL_CONSTANT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5
    CHAR_CONSTANT	shift, and go to state 6
    '(' 	shift, and go to state 8

    function_ref	go to state 13
    function_ref_par	go to state 14
    variable	go to state 15
    simple_variable_or_proc	go to state 16
    factor	go to state 21
    constant	go to state 19



state 8

    factor  ->  '(' . expr ')'   (rule 20)

    NOT 	shift, and go to state 1
    INT_CONSTANT	shift, and go to state 2
    REAL_CONSTANT	shift, and go to state 3
    BOOL_CONSTANT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5
    CHAR_CONSTANT	shift, and go to state 6
    '-' 	shift, and go to state 7
    '(' 	shift, and go to state 8

    expr	go to state 22
    simple_expr	go to state 11
    term	go to state 12
    function_ref	go to state 13
    function_ref_par	go to state 14
    variable	go to state 15
    simple_variable_or_proc	go to state 16
    factor_a	go to state 17
    factor	go to state 18
    constant	go to state 19



state 9

    expr_list  ->  expr_list . ',' expr   (rule 2)

    $   	go to state 37
    ',' 	shift, and go to state 23



state 10

    expr_list  ->  expr .   (rule 1)

    $default	reduce using rule 1 (expr_list)



state 11

    expr  ->  simple_expr .   (rule 3)
    expr  ->  simple_expr . RELOP simple_expr   (rule 4)
    simple_expr  ->  simple_expr . ADDOP term   (rule 6)
    simple_expr  ->  simple_expr . '-' term   (rule 7)

    ADDOP	shift, and go to state 24
    RELOP	shift, and go to state 25
    '-' 	shift, and go to state 26

    $default	reduce using rule 3 (expr)



state 12

    simple_expr  ->  term .   (rule 5)
    term  ->  term . MULOP factor_a   (rule 9)

    MULOP	shift, and go to state 27

    $default	reduce using rule 5 (simple_expr)



state 13

    factor  ->  function_ref .   (rule 21)

    $default	reduce using rule 21 (factor)



state 14

    function_ref  ->  function_ref_par .   (rule 11)
    variable  ->  function_ref_par .   (rule 14)

    '(' 	reduce using rule 14 (variable)
    $default	reduce using rule 11 (function_ref)



state 15

    function_ref_par  ->  variable . '(' expr_list ')'   (rule 12)

    '(' 	shift, and go to state 28



state 16

    variable  ->  simple_variable_or_proc .   (rule 13)

    $default	reduce using rule 13 (variable)



state 17

    term  ->  factor_a .   (rule 8)

    $default	reduce using rule 8 (term)



state 18

    factor_a  ->  factor .   (rule 17)

    $default	reduce using rule 17 (factor_a)



state 19

    factor  ->  constant .   (rule 19)

    $default	reduce using rule 19 (factor)



state 20

    factor  ->  NOT factor .   (rule 22)

    $default	reduce using rule 22 (factor)



state 21

    factor_a  ->  '-' factor .   (rule 16)

    $default	reduce using rule 16 (factor_a)



state 22

    factor  ->  '(' expr . ')'   (rule 20)

    ')' 	shift, and go to state 29



state 23

    expr_list  ->  expr_list ',' . expr   (rule 2)

    NOT 	shift, and go to state 1
    INT_CONSTANT	shift, and go to state 2
    REAL_CONSTANT	shift, and go to state 3
    BOOL_CONSTANT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5
    CHAR_CONSTANT	shift, and go to state 6
    '-' 	shift, and go to state 7
    '(' 	shift, and go to state 8

    expr	go to state 30
    simple_expr	go to state 11
    term	go to state 12
    function_ref	go to state 13
    function_ref_par	go to state 14
    variable	go to state 15
    simple_variable_or_proc	go to state 16
    factor_a	go to state 17
    factor	go to state 18
    constant	go to state 19



state 24

    simple_expr  ->  simple_expr ADDOP . term   (rule 6)

    NOT 	shift, and go to state 1
    INT_CONSTANT	shift, and go to state 2
    REAL_CONSTANT	shift, and go to state 3
    BOOL_CONSTANT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5
    CHAR_CONSTANT	shift, and go to state 6
    '-' 	shift, and go to state 7
    '(' 	shift, and go to state 8

    term	go to state 31
    function_ref	go to state 13
    function_ref_par	go to state 14
    variable	go to state 15
    simple_variable_or_proc	go to state 16
    factor_a	go to state 17
    factor	go to state 18
    constant	go to state 19



state 25

    expr  ->  simple_expr RELOP . simple_expr   (rule 4)

    NOT 	shift, and go to state 1
    INT_CONSTANT	shift, and go to state 2
    REAL_CONSTANT	shift, and go to state 3
    BOOL_CONSTANT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5
    CHAR_CONSTANT	shift, and go to state 6
    '-' 	shift, and go to state 7
    '(' 	shift, and go to state 8

    simple_expr	go to state 32
    term	go to state 12
    function_ref	go to state 13
    function_ref_par	go to state 14
    variable	go to state 15
    simple_variable_or_proc	go to state 16
    factor_a	go to state 17
    factor	go to state 18
    constant	go to state 19



state 26

    simple_expr  ->  simple_expr '-' . term   (rule 7)

    NOT 	shift, and go to state 1
    INT_CONSTANT	shift, and go to state 2
    REAL_CONSTANT	shift, and go to state 3
    BOOL_CONSTANT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5
    CHAR_CONSTANT	shift, and go to state 6
    '-' 	shift, and go to state 7
    '(' 	shift, and go to state 8

    term	go to state 33
    function_ref	go to state 13
    function_ref_par	go to state 14
    variable	go to state 15
    simple_variable_or_proc	go to state 16
    factor_a	go to state 17
    factor	go to state 18
    constant	go to state 19



state 27

    term  ->  term MULOP . factor_a   (rule 9)

    NOT 	shift, and go to state 1
    INT_CONSTANT	shift, and go to state 2
    REAL_CONSTANT	shift, and go to state 3
    BOOL_CONSTANT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5
    CHAR_CONSTANT	shift, and go to state 6
    '-' 	shift, and go to state 7
    '(' 	shift, and go to state 8

    function_ref	go to state 13
    function_ref_par	go to state 14
    variable	go to state 15
    simple_variable_or_proc	go to state 16
    factor_a	go to state 34
    factor	go to state 18
    constant	go to state 19



state 28

    function_ref_par  ->  variable '(' . expr_list ')'   (rule 12)

    NOT 	shift, and go to state 1
    INT_CONSTANT	shift, and go to state 2
    REAL_CONSTANT	shift, and go to state 3
    BOOL_CONSTANT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5
    CHAR_CONSTANT	shift, and go to state 6
    '-' 	shift, and go to state 7
    '(' 	shift, and go to state 8

    expr_list	go to state 35
    expr	go to state 10
    simple_expr	go to state 11
    term	go to state 12
    function_ref	go to state 13
    function_ref_par	go to state 14
    variable	go to state 15
    simple_variable_or_proc	go to state 16
    factor_a	go to state 17
    factor	go to state 18
    constant	go to state 19



state 29

    factor  ->  '(' expr ')' .   (rule 20)

    $default	reduce using rule 20 (factor)



state 30

    expr_list  ->  expr_list ',' expr .   (rule 2)

    $default	reduce using rule 2 (expr_list)



state 31

    simple_expr  ->  simple_expr ADDOP term .   (rule 6)
    term  ->  term . MULOP factor_a   (rule 9)

    MULOP	shift, and go to state 27

    $default	reduce using rule 6 (simple_expr)



state 32

    expr  ->  simple_expr RELOP simple_expr .   (rule 4)
    simple_expr  ->  simple_expr . ADDOP term   (rule 6)
    simple_expr  ->  simple_expr . '-' term   (rule 7)

    ADDOP	shift, and go to state 24
    '-' 	shift, and go to state 26

    $default	reduce using rule 4 (expr)



state 33

    simple_expr  ->  simple_expr '-' term .   (rule 7)
    term  ->  term . MULOP factor_a   (rule 9)

    MULOP	shift, and go to state 27

    $default	reduce using rule 7 (simple_expr)



state 34

    term  ->  term MULOP factor_a .   (rule 9)

    $default	reduce using rule 9 (term)



state 35

    expr_list  ->  expr_list . ',' expr   (rule 2)
    function_ref_par  ->  variable '(' expr_list . ')'   (rule 12)

    ',' 	shift, and go to state 23
    ')' 	shift, and go to state 36



state 36

    function_ref_par  ->  variable '(' expr_list ')' .   (rule 12)

    $default	reduce using rule 12 (function_ref_par)



state 37

    $   	go to state 38



state 38

    $default	accept
