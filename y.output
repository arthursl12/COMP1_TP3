

Terminals which are not used:

   print
   exit_command
   PROGRAM
   INTEGER
   REAL
   BOOLEAN
   CHAR
   DO
   WHILE
   UNTIL
   SIN
   LOG
   COS
   ORD
   CHR
   ABS
   SQRT
   EXP
   EOF_TOKEN


Conflict in state 62 between rule 17 and token ELSE resolved as shift.

Grammar
rule 1    ident_list -> ident_list ',' IDENTIFIER
rule 2    ident_list -> IDENTIFIER
rule 3    compound_stmt -> BEGIN_STMT stmt_list END
rule 4    stmt_list -> stmt_list ';' stmt
rule 5    stmt_list -> stmt
rule 6    stmt -> label ':' unlabelled_stmt
rule 7    stmt -> unlabelled_stmt
rule 8    label -> IDENTIFIER
rule 9    unlabelled_stmt -> assign_stmt
rule 10   unlabelled_stmt -> if_stmt
rule 11   unlabelled_stmt -> read_stmt
rule 12   unlabelled_stmt -> write_stmt
rule 13   unlabelled_stmt -> goto_stmt
rule 14   unlabelled_stmt -> compound_stmt
rule 15   cond -> expr
rule 16   assign_stmt -> IDENTIFIER ASSIGN expr
rule 17   if_stmt -> IF cond THEN stmt
rule 18   if_stmt -> IF cond THEN stmt ELSE stmt
rule 19   read_stmt -> READ '(' ident_list ')'
rule 20   write_stmt -> WRITE '(' expr_list ')'
rule 21   goto_stmt -> GOTO IDENTIFIER
rule 22   expr_list -> expr
rule 23   expr_list -> expr_list ',' expr
rule 24   expr -> simple_expr
rule 25   expr -> simple_expr RELOP simple_expr
rule 26   simple_expr -> term
rule 27   simple_expr -> simple_expr ADDOP term
rule 28   simple_expr -> simple_expr '-' term
rule 29   term -> factor_a
rule 30   term -> term MULOP factor_a
rule 31   function_ref -> EOLN
rule 32   function_ref -> function_ref_par
rule 33   function_ref_par -> variable '(' expr_list ')'
rule 34   variable -> simple_variable_or_proc
rule 35   variable -> function_ref_par
rule 36   simple_variable_or_proc -> IDENTIFIER
rule 37   factor_a -> '-' factor
rule 38   factor_a -> factor
rule 39   factor -> IDENTIFIER
rule 40   factor -> constant
rule 41   factor -> '(' expr ')'
rule 42   factor -> function_ref
rule 43   factor -> NOT factor
rule 44   constant -> INT_CONSTANT
rule 45   constant -> REAL_CONSTANT
rule 46   constant -> CHAR_CONSTANT
rule 47   constant -> BOOL_CONSTANT

Terminals, with rules where they appear

$ (-1)
'(' (40) 19 20 33 41
')' (41) 19 20 33 41
',' (44) 1 23
'-' (45) 28 37
':' (58) 6
';' (59) 4
error (256)
print (258)
exit_command (259)
ADDOP (260) 27
RELOP (261) 25
MULOP (262) 30
NOT (263) 43
ASSIGN (264) 16
INT_CONSTANT (265) 44
REAL_CONSTANT (266) 45
BOOL_CONSTANT (267) 47
IDENTIFIER (268) 1 2 8 16 21 36 39
CHAR_CONSTANT (269) 46
PROGRAM (270)
INTEGER (271)
REAL (272)
BOOLEAN (273)
CHAR (274)
BEGIN_STMT (275) 3
END (276) 3
IF (277) 17 18
THEN (278) 17 18
ELSE (279) 18
DO (280)
WHILE (281)
UNTIL (282)
READ (283) 19
WRITE (284) 20
GOTO (285) 21
SIN (286)
LOG (287)
COS (288)
ORD (289)
CHR (290)
ABS (291)
SQRT (292)
EXP (293)
EOF_TOKEN (294)
EOLN (295) 31
UMINUS (296)
IDX (297)

Nonterminals, with rules where they appear

ident_list (49)
    on left: 1 2, on right: 1 19
compound_stmt (50)
    on left: 3, on right: 14
stmt_list (51)
    on left: 4 5, on right: 3 4
stmt (52)
    on left: 6 7, on right: 4 5 17 18
label (53)
    on left: 8, on right: 6
unlabelled_stmt (54)
    on left: 9 10 11 12 13 14, on right: 6 7
cond (55)
    on left: 15, on right: 17 18
assign_stmt (56)
    on left: 16, on right: 9
if_stmt (57)
    on left: 17 18, on right: 10
read_stmt (58)
    on left: 19, on right: 11
write_stmt (59)
    on left: 20, on right: 12
goto_stmt (60)
    on left: 21, on right: 13
expr_list (61)
    on left: 22 23, on right: 20 23 33
expr (62)
    on left: 24 25, on right: 15 16 22 23 41
simple_expr (63)
    on left: 26 27 28, on right: 24 25 27 28
term (64)
    on left: 29 30, on right: 26 27 28 30
function_ref (65)
    on left: 31 32, on right: 42
function_ref_par (66)
    on left: 33, on right: 32 35
variable (67)
    on left: 34 35, on right: 33
simple_variable_or_proc (68)
    on left: 36, on right: 34
factor_a (69)
    on left: 37 38, on right: 29 30
factor (70)
    on left: 39 40 41 42 43, on right: 37 38 43
constant (71)
    on left: 44 45 46 47, on right: 40


state 0

    BEGIN_STMT	shift, and go to state 1

    compound_stmt	go to state 77



state 1

    compound_stmt  ->  BEGIN_STMT . stmt_list END   (rule 3)

    IDENTIFIER	shift, and go to state 2
    BEGIN_STMT	shift, and go to state 1
    IF  	shift, and go to state 3
    READ	shift, and go to state 4
    WRITE	shift, and go to state 5
    GOTO	shift, and go to state 6

    compound_stmt	go to state 7
    stmt_list	go to state 8
    stmt	go to state 9
    label	go to state 10
    unlabelled_stmt	go to state 11
    assign_stmt	go to state 12
    if_stmt	go to state 13
    read_stmt	go to state 14
    write_stmt	go to state 15
    goto_stmt	go to state 16



state 2

    label  ->  IDENTIFIER .   (rule 8)
    assign_stmt  ->  IDENTIFIER . ASSIGN expr   (rule 16)

    ASSIGN	shift, and go to state 17

    $default	reduce using rule 8 (label)



state 3

    if_stmt  ->  IF . cond THEN stmt   (rule 17)
    if_stmt  ->  IF . cond THEN stmt ELSE stmt   (rule 18)

    NOT 	shift, and go to state 18
    INT_CONSTANT	shift, and go to state 19
    REAL_CONSTANT	shift, and go to state 20
    BOOL_CONSTANT	shift, and go to state 21
    IDENTIFIER	shift, and go to state 22
    CHAR_CONSTANT	shift, and go to state 23
    EOLN	shift, and go to state 24
    '(' 	shift, and go to state 25
    '-' 	shift, and go to state 26

    cond	go to state 27
    expr	go to state 28
    simple_expr	go to state 29
    term	go to state 30
    function_ref	go to state 31
    function_ref_par	go to state 32
    variable	go to state 33
    simple_variable_or_proc	go to state 34
    factor_a	go to state 35
    factor	go to state 36
    constant	go to state 37



state 4

    read_stmt  ->  READ . '(' ident_list ')'   (rule 19)

    '(' 	shift, and go to state 38



state 5

    write_stmt  ->  WRITE . '(' expr_list ')'   (rule 20)

    '(' 	shift, and go to state 39



state 6

    goto_stmt  ->  GOTO . IDENTIFIER   (rule 21)

    IDENTIFIER	shift, and go to state 40



state 7

    unlabelled_stmt  ->  compound_stmt .   (rule 14)

    $default	reduce using rule 14 (unlabelled_stmt)



state 8

    compound_stmt  ->  BEGIN_STMT stmt_list . END   (rule 3)
    stmt_list  ->  stmt_list . ';' stmt   (rule 4)

    END 	shift, and go to state 41
    ';' 	shift, and go to state 42



state 9

    stmt_list  ->  stmt .   (rule 5)

    $default	reduce using rule 5 (stmt_list)



state 10

    stmt  ->  label . ':' unlabelled_stmt   (rule 6)

    ':' 	shift, and go to state 43



state 11

    stmt  ->  unlabelled_stmt .   (rule 7)

    $default	reduce using rule 7 (stmt)



state 12

    unlabelled_stmt  ->  assign_stmt .   (rule 9)

    $default	reduce using rule 9 (unlabelled_stmt)



state 13

    unlabelled_stmt  ->  if_stmt .   (rule 10)

    $default	reduce using rule 10 (unlabelled_stmt)



state 14

    unlabelled_stmt  ->  read_stmt .   (rule 11)

    $default	reduce using rule 11 (unlabelled_stmt)



state 15

    unlabelled_stmt  ->  write_stmt .   (rule 12)

    $default	reduce using rule 12 (unlabelled_stmt)



state 16

    unlabelled_stmt  ->  goto_stmt .   (rule 13)

    $default	reduce using rule 13 (unlabelled_stmt)



state 17

    assign_stmt  ->  IDENTIFIER ASSIGN . expr   (rule 16)

    NOT 	shift, and go to state 18
    INT_CONSTANT	shift, and go to state 19
    REAL_CONSTANT	shift, and go to state 20
    BOOL_CONSTANT	shift, and go to state 21
    IDENTIFIER	shift, and go to state 22
    CHAR_CONSTANT	shift, and go to state 23
    EOLN	shift, and go to state 24
    '(' 	shift, and go to state 25
    '-' 	shift, and go to state 26

    expr	go to state 44
    simple_expr	go to state 29
    term	go to state 30
    function_ref	go to state 31
    function_ref_par	go to state 32
    variable	go to state 33
    simple_variable_or_proc	go to state 34
    factor_a	go to state 35
    factor	go to state 36
    constant	go to state 37



state 18

    factor  ->  NOT . factor   (rule 43)

    NOT 	shift, and go to state 18
    INT_CONSTANT	shift, and go to state 19
    REAL_CONSTANT	shift, and go to state 20
    BOOL_CONSTANT	shift, and go to state 21
    IDENTIFIER	shift, and go to state 22
    CHAR_CONSTANT	shift, and go to state 23
    EOLN	shift, and go to state 24
    '(' 	shift, and go to state 25

    function_ref	go to state 31
    function_ref_par	go to state 32
    variable	go to state 33
    simple_variable_or_proc	go to state 34
    factor	go to state 45
    constant	go to state 37



state 19

    constant  ->  INT_CONSTANT .   (rule 44)

    $default	reduce using rule 44 (constant)



state 20

    constant  ->  REAL_CONSTANT .   (rule 45)

    $default	reduce using rule 45 (constant)



state 21

    constant  ->  BOOL_CONSTANT .   (rule 47)

    $default	reduce using rule 47 (constant)



state 22

    simple_variable_or_proc  ->  IDENTIFIER .   (rule 36)
    factor  ->  IDENTIFIER .   (rule 39)

    $default	reduce using rule 39 (factor)



state 23

    constant  ->  CHAR_CONSTANT .   (rule 46)

    $default	reduce using rule 46 (constant)



state 24

    function_ref  ->  EOLN .   (rule 31)

    $default	reduce using rule 31 (function_ref)



state 25

    factor  ->  '(' . expr ')'   (rule 41)

    NOT 	shift, and go to state 18
    INT_CONSTANT	shift, and go to state 19
    REAL_CONSTANT	shift, and go to state 20
    BOOL_CONSTANT	shift, and go to state 21
    IDENTIFIER	shift, and go to state 22
    CHAR_CONSTANT	shift, and go to state 23
    EOLN	shift, and go to state 24
    '(' 	shift, and go to state 25
    '-' 	shift, and go to state 26

    expr	go to state 46
    simple_expr	go to state 29
    term	go to state 30
    function_ref	go to state 31
    function_ref_par	go to state 32
    variable	go to state 33
    simple_variable_or_proc	go to state 34
    factor_a	go to state 35
    factor	go to state 36
    constant	go to state 37



state 26

    factor_a  ->  '-' . factor   (rule 37)

    NOT 	shift, and go to state 18
    INT_CONSTANT	shift, and go to state 19
    REAL_CONSTANT	shift, and go to state 20
    BOOL_CONSTANT	shift, and go to state 21
    IDENTIFIER	shift, and go to state 22
    CHAR_CONSTANT	shift, and go to state 23
    EOLN	shift, and go to state 24
    '(' 	shift, and go to state 25

    function_ref	go to state 31
    function_ref_par	go to state 32
    variable	go to state 33
    simple_variable_or_proc	go to state 34
    factor	go to state 47
    constant	go to state 37



state 27

    if_stmt  ->  IF cond . THEN stmt   (rule 17)
    if_stmt  ->  IF cond . THEN stmt ELSE stmt   (rule 18)

    THEN	shift, and go to state 48



state 28

    cond  ->  expr .   (rule 15)

    $default	reduce using rule 15 (cond)



state 29

    expr  ->  simple_expr .   (rule 24)
    expr  ->  simple_expr . RELOP simple_expr   (rule 25)
    simple_expr  ->  simple_expr . ADDOP term   (rule 27)
    simple_expr  ->  simple_expr . '-' term   (rule 28)

    ADDOP	shift, and go to state 49
    RELOP	shift, and go to state 50
    '-' 	shift, and go to state 51

    $default	reduce using rule 24 (expr)



state 30

    simple_expr  ->  term .   (rule 26)
    term  ->  term . MULOP factor_a   (rule 30)

    MULOP	shift, and go to state 52

    $default	reduce using rule 26 (simple_expr)



state 31

    factor  ->  function_ref .   (rule 42)

    $default	reduce using rule 42 (factor)



state 32

    function_ref  ->  function_ref_par .   (rule 32)
    variable  ->  function_ref_par .   (rule 35)

    $default	reduce using rule 32 (function_ref)



state 33

    function_ref_par  ->  variable . '(' expr_list ')'   (rule 33)

    '(' 	shift, and go to state 53



state 34

    variable  ->  simple_variable_or_proc .   (rule 34)

    $default	reduce using rule 34 (variable)



state 35

    term  ->  factor_a .   (rule 29)

    $default	reduce using rule 29 (term)



state 36

    factor_a  ->  factor .   (rule 38)

    $default	reduce using rule 38 (factor_a)



state 37

    factor  ->  constant .   (rule 40)

    $default	reduce using rule 40 (factor)



state 38

    read_stmt  ->  READ '(' . ident_list ')'   (rule 19)

    IDENTIFIER	shift, and go to state 54

    ident_list	go to state 55



state 39

    write_stmt  ->  WRITE '(' . expr_list ')'   (rule 20)

    NOT 	shift, and go to state 18
    INT_CONSTANT	shift, and go to state 19
    REAL_CONSTANT	shift, and go to state 20
    BOOL_CONSTANT	shift, and go to state 21
    IDENTIFIER	shift, and go to state 22
    CHAR_CONSTANT	shift, and go to state 23
    EOLN	shift, and go to state 24
    '(' 	shift, and go to state 25
    '-' 	shift, and go to state 26

    expr_list	go to state 56
    expr	go to state 57
    simple_expr	go to state 29
    term	go to state 30
    function_ref	go to state 31
    function_ref_par	go to state 32
    variable	go to state 33
    simple_variable_or_proc	go to state 34
    factor_a	go to state 35
    factor	go to state 36
    constant	go to state 37



state 40

    goto_stmt  ->  GOTO IDENTIFIER .   (rule 21)

    $default	reduce using rule 21 (goto_stmt)



state 41

    compound_stmt  ->  BEGIN_STMT stmt_list END .   (rule 3)

    $default	reduce using rule 3 (compound_stmt)



state 42

    stmt_list  ->  stmt_list ';' . stmt   (rule 4)

    IDENTIFIER	shift, and go to state 2
    BEGIN_STMT	shift, and go to state 1
    IF  	shift, and go to state 3
    READ	shift, and go to state 4
    WRITE	shift, and go to state 5
    GOTO	shift, and go to state 6

    compound_stmt	go to state 7
    stmt	go to state 58
    label	go to state 10
    unlabelled_stmt	go to state 11
    assign_stmt	go to state 12
    if_stmt	go to state 13
    read_stmt	go to state 14
    write_stmt	go to state 15
    goto_stmt	go to state 16



state 43

    stmt  ->  label ':' . unlabelled_stmt   (rule 6)

    IDENTIFIER	shift, and go to state 59
    BEGIN_STMT	shift, and go to state 1
    IF  	shift, and go to state 3
    READ	shift, and go to state 4
    WRITE	shift, and go to state 5
    GOTO	shift, and go to state 6

    compound_stmt	go to state 7
    unlabelled_stmt	go to state 60
    assign_stmt	go to state 12
    if_stmt	go to state 13
    read_stmt	go to state 14
    write_stmt	go to state 15
    goto_stmt	go to state 16



state 44

    assign_stmt  ->  IDENTIFIER ASSIGN expr .   (rule 16)

    $default	reduce using rule 16 (assign_stmt)



state 45

    factor  ->  NOT factor .   (rule 43)

    $default	reduce using rule 43 (factor)



state 46

    factor  ->  '(' expr . ')'   (rule 41)

    ')' 	shift, and go to state 61



state 47

    factor_a  ->  '-' factor .   (rule 37)

    $default	reduce using rule 37 (factor_a)



state 48

    if_stmt  ->  IF cond THEN . stmt   (rule 17)
    if_stmt  ->  IF cond THEN . stmt ELSE stmt   (rule 18)

    IDENTIFIER	shift, and go to state 2
    BEGIN_STMT	shift, and go to state 1
    IF  	shift, and go to state 3
    READ	shift, and go to state 4
    WRITE	shift, and go to state 5
    GOTO	shift, and go to state 6

    compound_stmt	go to state 7
    stmt	go to state 62
    label	go to state 10
    unlabelled_stmt	go to state 11
    assign_stmt	go to state 12
    if_stmt	go to state 13
    read_stmt	go to state 14
    write_stmt	go to state 15
    goto_stmt	go to state 16



state 49

    simple_expr  ->  simple_expr ADDOP . term   (rule 27)

    NOT 	shift, and go to state 18
    INT_CONSTANT	shift, and go to state 19
    REAL_CONSTANT	shift, and go to state 20
    BOOL_CONSTANT	shift, and go to state 21
    IDENTIFIER	shift, and go to state 22
    CHAR_CONSTANT	shift, and go to state 23
    EOLN	shift, and go to state 24
    '(' 	shift, and go to state 25
    '-' 	shift, and go to state 26

    term	go to state 63
    function_ref	go to state 31
    function_ref_par	go to state 32
    variable	go to state 33
    simple_variable_or_proc	go to state 34
    factor_a	go to state 35
    factor	go to state 36
    constant	go to state 37



state 50

    expr  ->  simple_expr RELOP . simple_expr   (rule 25)

    NOT 	shift, and go to state 18
    INT_CONSTANT	shift, and go to state 19
    REAL_CONSTANT	shift, and go to state 20
    BOOL_CONSTANT	shift, and go to state 21
    IDENTIFIER	shift, and go to state 22
    CHAR_CONSTANT	shift, and go to state 23
    EOLN	shift, and go to state 24
    '(' 	shift, and go to state 25
    '-' 	shift, and go to state 26

    simple_expr	go to state 64
    term	go to state 30
    function_ref	go to state 31
    function_ref_par	go to state 32
    variable	go to state 33
    simple_variable_or_proc	go to state 34
    factor_a	go to state 35
    factor	go to state 36
    constant	go to state 37



state 51

    simple_expr  ->  simple_expr '-' . term   (rule 28)

    NOT 	shift, and go to state 18
    INT_CONSTANT	shift, and go to state 19
    REAL_CONSTANT	shift, and go to state 20
    BOOL_CONSTANT	shift, and go to state 21
    IDENTIFIER	shift, and go to state 22
    CHAR_CONSTANT	shift, and go to state 23
    EOLN	shift, and go to state 24
    '(' 	shift, and go to state 25
    '-' 	shift, and go to state 26

    term	go to state 65
    function_ref	go to state 31
    function_ref_par	go to state 32
    variable	go to state 33
    simple_variable_or_proc	go to state 34
    factor_a	go to state 35
    factor	go to state 36
    constant	go to state 37



state 52

    term  ->  term MULOP . factor_a   (rule 30)

    NOT 	shift, and go to state 18
    INT_CONSTANT	shift, and go to state 19
    REAL_CONSTANT	shift, and go to state 20
    BOOL_CONSTANT	shift, and go to state 21
    IDENTIFIER	shift, and go to state 22
    CHAR_CONSTANT	shift, and go to state 23
    EOLN	shift, and go to state 24
    '(' 	shift, and go to state 25
    '-' 	shift, and go to state 26

    function_ref	go to state 31
    function_ref_par	go to state 32
    variable	go to state 33
    simple_variable_or_proc	go to state 34
    factor_a	go to state 66
    factor	go to state 36
    constant	go to state 37



state 53

    function_ref_par  ->  variable '(' . expr_list ')'   (rule 33)

    NOT 	shift, and go to state 18
    INT_CONSTANT	shift, and go to state 19
    REAL_CONSTANT	shift, and go to state 20
    BOOL_CONSTANT	shift, and go to state 21
    IDENTIFIER	shift, and go to state 22
    CHAR_CONSTANT	shift, and go to state 23
    EOLN	shift, and go to state 24
    '(' 	shift, and go to state 25
    '-' 	shift, and go to state 26

    expr_list	go to state 67
    expr	go to state 57
    simple_expr	go to state 29
    term	go to state 30
    function_ref	go to state 31
    function_ref_par	go to state 32
    variable	go to state 33
    simple_variable_or_proc	go to state 34
    factor_a	go to state 35
    factor	go to state 36
    constant	go to state 37



state 54

    ident_list  ->  IDENTIFIER .   (rule 2)

    $default	reduce using rule 2 (ident_list)



state 55

    ident_list  ->  ident_list . ',' IDENTIFIER   (rule 1)
    read_stmt  ->  READ '(' ident_list . ')'   (rule 19)

    ',' 	shift, and go to state 68
    ')' 	shift, and go to state 69



state 56

    write_stmt  ->  WRITE '(' expr_list . ')'   (rule 20)
    expr_list  ->  expr_list . ',' expr   (rule 23)

    ',' 	shift, and go to state 70
    ')' 	shift, and go to state 71



state 57

    expr_list  ->  expr .   (rule 22)

    $default	reduce using rule 22 (expr_list)



state 58

    stmt_list  ->  stmt_list ';' stmt .   (rule 4)

    $default	reduce using rule 4 (stmt_list)



state 59

    assign_stmt  ->  IDENTIFIER . ASSIGN expr   (rule 16)

    ASSIGN	shift, and go to state 17



state 60

    stmt  ->  label ':' unlabelled_stmt .   (rule 6)

    $default	reduce using rule 6 (stmt)



state 61

    factor  ->  '(' expr ')' .   (rule 41)

    $default	reduce using rule 41 (factor)



state 62

    if_stmt  ->  IF cond THEN stmt .   (rule 17)
    if_stmt  ->  IF cond THEN stmt . ELSE stmt   (rule 18)

    ELSE	shift, and go to state 72

    $default	reduce using rule 17 (if_stmt)



state 63

    simple_expr  ->  simple_expr ADDOP term .   (rule 27)
    term  ->  term . MULOP factor_a   (rule 30)

    MULOP	shift, and go to state 52

    $default	reduce using rule 27 (simple_expr)



state 64

    expr  ->  simple_expr RELOP simple_expr .   (rule 25)
    simple_expr  ->  simple_expr . ADDOP term   (rule 27)
    simple_expr  ->  simple_expr . '-' term   (rule 28)

    ADDOP	shift, and go to state 49
    '-' 	shift, and go to state 51

    $default	reduce using rule 25 (expr)



state 65

    simple_expr  ->  simple_expr '-' term .   (rule 28)
    term  ->  term . MULOP factor_a   (rule 30)

    MULOP	shift, and go to state 52

    $default	reduce using rule 28 (simple_expr)



state 66

    term  ->  term MULOP factor_a .   (rule 30)

    $default	reduce using rule 30 (term)



state 67

    expr_list  ->  expr_list . ',' expr   (rule 23)
    function_ref_par  ->  variable '(' expr_list . ')'   (rule 33)

    ',' 	shift, and go to state 70
    ')' 	shift, and go to state 73



state 68

    ident_list  ->  ident_list ',' . IDENTIFIER   (rule 1)

    IDENTIFIER	shift, and go to state 74



state 69

    read_stmt  ->  READ '(' ident_list ')' .   (rule 19)

    $default	reduce using rule 19 (read_stmt)



state 70

    expr_list  ->  expr_list ',' . expr   (rule 23)

    NOT 	shift, and go to state 18
    INT_CONSTANT	shift, and go to state 19
    REAL_CONSTANT	shift, and go to state 20
    BOOL_CONSTANT	shift, and go to state 21
    IDENTIFIER	shift, and go to state 22
    CHAR_CONSTANT	shift, and go to state 23
    EOLN	shift, and go to state 24
    '(' 	shift, and go to state 25
    '-' 	shift, and go to state 26

    expr	go to state 75
    simple_expr	go to state 29
    term	go to state 30
    function_ref	go to state 31
    function_ref_par	go to state 32
    variable	go to state 33
    simple_variable_or_proc	go to state 34
    factor_a	go to state 35
    factor	go to state 36
    constant	go to state 37



state 71

    write_stmt  ->  WRITE '(' expr_list ')' .   (rule 20)

    $default	reduce using rule 20 (write_stmt)



state 72

    if_stmt  ->  IF cond THEN stmt ELSE . stmt   (rule 18)

    IDENTIFIER	shift, and go to state 2
    BEGIN_STMT	shift, and go to state 1
    IF  	shift, and go to state 3
    READ	shift, and go to state 4
    WRITE	shift, and go to state 5
    GOTO	shift, and go to state 6

    compound_stmt	go to state 7
    stmt	go to state 76
    label	go to state 10
    unlabelled_stmt	go to state 11
    assign_stmt	go to state 12
    if_stmt	go to state 13
    read_stmt	go to state 14
    write_stmt	go to state 15
    goto_stmt	go to state 16



state 73

    function_ref_par  ->  variable '(' expr_list ')' .   (rule 33)

    $default	reduce using rule 33 (function_ref_par)



state 74

    ident_list  ->  ident_list ',' IDENTIFIER .   (rule 1)

    $default	reduce using rule 1 (ident_list)



state 75

    expr_list  ->  expr_list ',' expr .   (rule 23)

    $default	reduce using rule 23 (expr_list)



state 76

    if_stmt  ->  IF cond THEN stmt ELSE stmt .   (rule 18)

    $default	reduce using rule 18 (if_stmt)



state 77

    $   	go to state 78



state 78

    $   	go to state 79



state 79

    $default	accept
